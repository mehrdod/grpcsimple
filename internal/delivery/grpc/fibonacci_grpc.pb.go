// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcdelivery

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FibonacciClient is the client API for Fibonacci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonacciClient interface {
	Get(ctx context.Context, in *Range, opts ...grpc.CallOption) (Fibonacci_GetClient, error)
}

type fibonacciClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciClient(cc grpc.ClientConnInterface) FibonacciClient {
	return &fibonacciClient{cc}
}

func (c *fibonacciClient) Get(ctx context.Context, in *Range, opts ...grpc.CallOption) (Fibonacci_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fibonacci_ServiceDesc.Streams[0], "/grpchandler.Fibonacci/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &fibonacciGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fibonacci_GetClient interface {
	Recv() (*FibonacciNum, error)
	grpc.ClientStream
}

type fibonacciGetClient struct {
	grpc.ClientStream
}

func (x *fibonacciGetClient) Recv() (*FibonacciNum, error) {
	m := new(FibonacciNum)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FibonacciServer is the server API for Fibonacci service.
// All implementations must embed UnimplementedFibonacciServer
// for forward compatibility
type FibonacciServer interface {
	Get(*Range, Fibonacci_GetServer) error
	mustEmbedUnimplementedFibonacciServer()
}

// UnimplementedFibonacciServer must be embedded to have forward compatible implementations.
type UnimplementedFibonacciServer struct {
}

func (UnimplementedFibonacciServer) Get(*Range, Fibonacci_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFibonacciServer) mustEmbedUnimplementedFibonacciServer() {}

// UnsafeFibonacciServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibonacciServer will
// result in compilation errors.
type UnsafeFibonacciServer interface {
	mustEmbedUnimplementedFibonacciServer()
}

func RegisterFibonacciServer(s grpc.ServiceRegistrar, srv FibonacciServer) {
	s.RegisterService(&Fibonacci_ServiceDesc, srv)
}

func _Fibonacci_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonacciServer).Get(m, &fibonacciGetServer{stream})
}

type Fibonacci_GetServer interface {
	Send(*FibonacciNum) error
	grpc.ServerStream
}

type fibonacciGetServer struct {
	grpc.ServerStream
}

func (x *fibonacciGetServer) Send(m *FibonacciNum) error {
	return x.ServerStream.SendMsg(m)
}

// Fibonacci_ServiceDesc is the grpc.ServiceDesc for Fibonacci service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fibonacci_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpchandler.Fibonacci",
	HandlerType: (*FibonacciServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Fibonacci_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/fibonacci.proto",
}
